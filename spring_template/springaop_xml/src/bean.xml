<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
		
	<!-- 配置service -->
	<bean id="customerService" class="com.danhuang.service.impl.CustomerServiceImpl"></bean>	
	<!-- 基于xml的aop配置步骤 -->
	<!-- 第一步：把通知类交给spring管理 -->
	<bean id="logger" class="com.danhuang.utils.Logger"></bean>
	<!-- 第二步：导入aop名称空间，并且使用aop:config开始aop的配置 -->
	<aop:config>
		<!-- 定义通用的切入点表达式，如果写在aop:aspect的外边表示所有切面可用,必须卸载aspect之前 -->
		<aop:pointcut expression="execution(* com.danhuang.service.impl.*.*(..))" id="pt1"/>
		
		<!-- 第三步：使用aop:aspect配置切面
			id属性：给切面提供一个唯一标识
			ref:用于引用通知bean的id
		 -->
		<aop:aspect id="logAdvice" ref="logger">
			<!-- 第四步：配置通知的类型，指定增强的方法什么时候执行
				method：用于指定增强的方法名称
				pointcut:用于指定切入点表达式
			 -->
			 <!-- 切入点表达式：
			 	关键字：execution(表达式)
			 		表达式写法：访问修饰符 返回地址 包名..包名..类名..方法名（参数列表）
			 		全匹配方式：public void com.danhuang.service.impl.CustomerServiceImpl.saveCustomer())
			 			访问修饰符可以省略public void com.danhuang.service.impl.CustomerServiceImpl.saveCustomer())
			 			返回值可以使用通配符，表示任意返回值。通配符是*
			 			包名可以使用通配符，表示任意包。但是有几个包就要几个通配符。
			 			包名可以使用..表示当前包及其子包
			 			类名和方法名都可以使用通配符 * com..*.*()
			 			参数类型可以使用具体类型，来表示参数类型
			 				基本类型直接写类型名称：int
			 				引用类型必须是包名.类名。java.lang.Integer
			 			参数列表可以使用通配符，表示任意参数类型，但是必须有参数
			 			参数列表可以使用..表示有无参数均可，有参数可以是任意类型
			 		全通配方式：* *..*.*(..)
			 		实际开发中，一般情况下都是对业务层方法进行增强：
			 			所以写法：* com.danhuang.service.impl.*.*(..)
			  -->
			
			<!-- 如果引用的切入点少的话可以直接这么写 -->
			<!-- <aop:before method="printLog" pointcut="execution(* com.danhuang.service.impl.*.*(..))"/> -->
		
			<!-- 配置前置通知，永远在切入点方法执行之前执行 -->
			<aop:before method="beforePrintLog" pointcut-ref="pt1"/>
			<!-- 配置后置通知，切入点方法正常执行之后执行 -->
			<aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>
			<!-- 配置异常通知,切入点方法执行产生异常之后执行，它和后置通知永远只能执行一个 -->
			<aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>
			<!-- 配置最终通知，无论切入点方法是否正常执行都会在其后面执行 -->
			<aop:after method="afterPrintLog" pointcut-ref="pt1"/>
			
			<!-- 配置环绕通知 -->
			<aop:around method="aroundPrintLog" pointcut-ref="pt1"/>
			<!-- 定义通用的切入点表达式：如果是写在了aop:aspect标签内部，则表示只有当前切面可用 
			<aop:pointcut expression="execution(* com.danhuang.service.impl.*.*(..))" id="pt1"/>-->
		</aop:aspect>

	</aop:config>
</beans>