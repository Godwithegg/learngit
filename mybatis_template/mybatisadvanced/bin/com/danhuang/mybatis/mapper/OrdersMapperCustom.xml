<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
	注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="com.danhuang.mybatis.mapper.OrdersMapperCustom">

	<!-- 订单关联查询用户的resultmap
		将整个结果映射到com.danhuang.mybatis.po.Orders中
	 -->
	<resultMap type="com.danhuang.mybatis.po.Orders" id="ordersUserResultMap">
		<!-- 配置映射的订单信息 -->
		<id column="id" property="id"/>
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<!-- 配置映射的用户信息,association:用于映射关联查询单个对象的信息，property关联信息映射到Orders中哪个属性 -->
		<association property="user" javaType="com.danhuang.mybatis.po.User">
			<!-- id:关联查询用户的唯一标识,column指定唯一标识用户信息的列,javaType映射到user的哪个属性 -->
			<id column="user_id" property="id"/>
			<result column="username" property="username"/>
			<result column="sex" property="sex"/>
			<result column="address" property="address"/>
		</association>
	</resultMap>
	<!-- 查询订单及订单明细的resultmap,extends:继承，就不用配置订单信息和用户信息映射 -->
	<resultMap type="com.danhuang.mybatis.po.Orders" id="OrdersAndOrderDetailResultMap" extends="ordersUserResultMap">
		<!-- 订单信息 -->
		<!-- 用户信息 -->
		<!-- 使用extends所以不用配置 -->
		<!-- 订单明细信息
			一个订单关联查询出多条明细，使用collection进行映射
			collection关联查询信息到多条记录映射到集合对象中
			property:将关联查询到多条记录映射到orders中的orderdetail属性
			ofType:指定映射集合属性中pojo类型
		-->
		<collection property="orderdetails" ofType="com.danhuang.mybatis.po.Orderdetail">
			<!-- id:订单明细唯一标识 -->
			<id column="orderdetail_id" property="id"/>
			<result column="items_id" property="itemsId"/>
			<result column="items_num" property="itemsNum"/>
			<result column="orders_id" property="ordersId"/>
		</collection>
	</resultMap>
	<!-- 查询用户及购买的商品 -->	
	<resultMap type="com.danhuang.mybatis.po.User" id="UserAndItemsResultMap">
		<!-- 用户信息 -->
		<id column="user_id" property="id"/>
		<result column="username" property="username"/>
		<result column="sex" property="sex"/>
		<result column="address" property="address"/>
		
		<!-- 订单信息 
			一个用户对应多个订单
		-->
		<collection property="ordersList" ofType="com.danhuang.mybatis.po.Orders">
			<id column="id" property="id"/>
			<result column="user_id" property="userId"/>
			<result column="number" property="number"/>
			<result column="createtime" property="createtime"/>
			<result column="note" property="note"/>
			
			<!-- 订单明细
				一个订单包括多个明细
			 -->
			 <collection property="orderdetails" ofType="com.danhuang.mybatis.po.Orderdetail">
			 	<id column="orderdetail_id" property="id"/>
				<result column="items_id" property="itemsId"/>
				<result column="items_num" property="itemsNum"/>
				<result column="orders_id" property="ordersId"/>
				<!-- 商品信息
				 	一个订单明细对应一个商品
				  -->
				  <association property="items" javaType="com.danhuang.mybatis.po.Items">
				  	<id column="items_id" property="id"/>
				  	<result column="items_name" property="name"/>
				  	<result column="items_detail" property="detail"/>
				  	<result column="items_price" property="price"/>
				  </association>
			 </collection>
			 
			 
		</collection>
	</resultMap>
	<!-- 查询订单关联查询用户信息 -->
	<select id="findOrdersUser" resultType="com.danhuang.mybatis.po.OrdersCustom">
		SELECT
		orders.*,
		USER.username,
		USER.sex,
		USER.address
		FROM
		orders,
		USER
		WHERE orders.user_id = user.id
	</select>
	<!-- 查询订单关联查询用户信息，使用resultmap -->
	<select id="findOrdersUserResultMap" resultMap="ordersUserResultMap">
		SELECT
		orders.*,
		USER.username,
		USER.sex,
		USER.address
		FROM
		orders,
		USER
		WHERE orders.user_id = user.id
	</select>
	<!-- 查询订单关联查询用户及订单明细，使用resultmap -->
	<select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
		SELECT 
		  orders.*,
		  USER.username,
		  USER.sex,
		  USER.address,
		  orderdetail.id orderdetail_id,
		  orderdetail.items_id,
		  orderdetail.items_num,
		  orderdetail.orders_id
		FROM
		  orders,
		  USER,
		  orderdetail
		WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
	</select>
	<!-- 查询用户及购买的商品信息，使用resultmap -->
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		SELECT 
		  orders.*,
		  USER.username,
		  USER.sex,
		  USER.address,
		  orderdetail.id orderdetail_id,
		  orderdetail.items_id,
		  orderdetail.items_num,
		  orderdetail.orders_id,
		  items.name items_name,
		  items.detail items_detail,
		  items.price items_price
		FROM
		  orders,
		  USER,
		  orderdetail,
		  items
		WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id AND orderdetail.items_id = items.id
	</select>
	<!-- 延迟加载的resultmap -->
	<resultMap type="com.danhuang.mybatis.po.Orders" id="OrdersUserLazyLoading">
		<!-- 对订单信息进行映射配置 -->
		<id column="id" property="id"/>
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<!-- 实现对用户信息进行延迟加载
			select：指定延迟加载需要执行的sql语句（statement的id（就是根据user_id去查询用户信息的statement，
		 	要使用userMappper.xml中的findUserById完成用户信息的查询，如果findUserById不在本mapper的命名空间中，需要在前面加namespace
		 	column：订单信息中关联用户信息查询的列，是user_id
			关联查询的sql理解为：SELECT orders.*,
					(SELECT username FROM USER WHERE orders.user_id = user.id)username,
					(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
					 FROM orders
		 -->
		<association property="user" javaType="com.danhuang.mybatis.po.User"
		select="com.danhuang.mybatis.mapper.UserMapper.findUserById" column="user_id">
			<!-- 实现对用户信息延迟加载 -->
		</association>
	</resultMap>
	<!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
	<select id="findOrdersUserLazyLoading" resultMap="OrdersUserLazyLoading">
		select * from orders 
	</select>
</mapper>